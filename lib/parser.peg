{
    function mk(thing, opts) {
        opts.type = thing;
        return opts;
    }
}

_
    = [ \t]*

__
    = IGNORE*

IGNORE
    = [ \r\n\t]+
    / COMMENT

START
    = '{{'

END
    = '}}'

NL
    = '\n'
    / '\r' '\n'?

COMMENT
    = '#' [^\r\n]*

TERM
    = _ COMMENT? !.
    / _ COMMENT? NL __

ident
    = $( [a-z]i[a-z0-9_-]i* )

//
// Template

FileTemplate
    = FileChunk*

FileChunk
    = Expansion
    / Raw

//
// Script

Script
    = __ statements:(Statement)* {
        return statements;
    }

Statement
    = SectionLabel
    / Directive

SectionLabel
    = name:SectionLabelName ':' TERM {
        return { type: 'label', name: name }
    }

SectionLabelName
    = $ 'inputs'
    / $ 'actions'

Directive
    = name:ident _ args:DirectiveArgs? TERM {
        return mk('directive', {name: name, args: args});
    }

DirectiveArgs
    = n:DirectiveNamedArgs {
        return { positional: [], named: n };
    }
    / p:DirectivePositionalArgs n:(',' __ n:DirectiveNamedArgs)? {
        return { positional: p, named: n ? n[2] : {} };
    }
    
DirectivePositionalArgs
    = head:DirectivePositionalArg tail:(',' __ DirectivePositionalArg)* {
        var out = [head];
        for (var i = 0; i < tail.length; ++i) {
            out.push(tail[i][2]);
        }
        return out;
    }

DirectivePositionalArg
    = arg:ScriptExpression _ !'=' { return arg; }

DirectiveNamedArgs
    = head:DirectiveNamedArgPair _ tail:(',' __ DirectiveNamedArgPair _)* {
        var out = {};
        out[head.key] = head.value;
        for (var i = 0; i < tail.length; ++i) {
            out[tail[i][2].key] = tail[i][2].value;
        }
        return out;
    }

DirectiveNamedArgPair
    = key:ident _ '=' _ value:ScriptExpression {
        return { key: key, value: value };
    }

ScriptExpression
    = Pipeline
    / Atom

Pipeline
    = head:Atom _ tail:('|' _ Atom)+ {
        var items = [head];
        for (var i = 0; i < tail.length; ++i) {
            items.push(tail[i][2]);
        }
        return mk('pipeline', {list: items});
    }

Atom
    = FunctionCall
    / String
    / Symbol
    / Array

FunctionCall
    = name:ident '(' _ args:AtomList? ')' {
        return mk('function-call', {name: name, args: args});
    }

Symbol
    = sym: $( [a-zA-Z0-9\.\\/_:-]+ ) {
        return mk('symbol', {symbol: sym})
    }

Array
    = '[' _ items:AtomList? ']' {
        return mk('array', {items: items});
    }

AtomList
    = Atom _ (',' _ Atom)*

//
// Common

Expansion
    = START __ exp:Expression END { return exp; }

Expression
    = exp:Ident __ {
        return exp;
    }

Ident
    = name:ident {
        return { type: 'ident', name: name };
    }

Raw
    = $( [^{] / '{' !'{' )+

String
    = '"' str:(StringItem*) '"' {
        if (str.length === 1 && typeof str[0] === 'string') {
            return str[0];
        } else {
            return mk('interpolated-string', {chunks: str});
        }
    }

StringItem
    = $( StringChar+ )
    / Expansion

StringChar
    = '\\n'     { return "\n"; }
    / '\\t'     { return "\t"; }
    / '\\"'     { return '"'; }
    / '\\\\'    { return "\\"; }
    / '{' !'{'  { return String.fromCharCode(123); /* workaround for pegjs bug */ }
    / [^\{\"]
